package service

import (
	"creator-tool-backend/config"
	"encoding/json"
	"fmt"
	"math/rand"
	"strings"
)

// TikTokAnalysisResult represents the comprehensive analysis result
type TikTokAnalysisResult struct {
	HookScore         int      `json:"hook_score"`
	ViralPotential    int      `json:"viral_potential"`
	OptimizationTips  []string `json:"optimization_tips"`
	TrendingHashtags  []string `json:"trending_hashtags"`
	SuggestedCaption  string   `json:"suggested_caption"`
	BestPostingTime   string   `json:"best_posting_time"`
	EngagementPrompts []string `json:"engagement_prompts"`
	CallToAction      string   `json:"call_to_action"`
	ContentCategory   string   `json:"content_category"`
	TargetAudience    string   `json:"target_audience"`
	TrendingTopics    []string `json:"trending_topics"`
	VideoPacing       string   `json:"video_pacing"`
	ThumbnailTips     []string `json:"thumbnail_tips"`
	SoundSuggestions  []string `json:"sound_suggestions"`
	AnalysisMethod    string   `json:"analysis_method"` // "ai", "rule-based", "hybrid"
}

// GenerateAdvancedTikTokOptimization creates a comprehensive TikTok optimization analysis
func GenerateAdvancedTikTokOptimization(transcript, currentCaption, targetAudience, targetLanguage string, duration float64) (*TikTokAnalysisResult, error) {
	// Analyze content category and audience (rule-based)
	contentCategory := analyzeContentCategory(transcript, currentCaption)

	// Generate comprehensive analysis
	result := &TikTokAnalysisResult{
		ContentCategory: contentCategory,
		TargetAudience:  targetAudience,
	}

	// Hook Score Analysis (rule-based)
	result.HookScore = calculateHookScore(transcript, duration, contentCategory)

	// Viral Potential Analysis (rule-based)
	result.ViralPotential = calculateViralPotential(transcript, duration, contentCategory, targetAudience)

	// Video Pacing Analysis (rule-based)
	result.VideoPacing = analyzeVideoPacing(duration, contentCategory)

	// Thumbnail Tips (rule-based)
	result.ThumbnailTips = generateThumbnailTips(contentCategory, targetAudience, targetLanguage)

	// Sound Suggestions (rule-based)
	result.SoundSuggestions = generateSoundSuggestions(contentCategory, targetAudience, targetLanguage)

	// AI-powered analysis for trending and dynamic content
	aiAnalysis, err := generateAIAnalysis(transcript, currentCaption, contentCategory, targetAudience, targetLanguage, duration)
	if err != nil {
		// Fallback to rule-based if AI fails
		result.AnalysisMethod = "rule-based"
		result.OptimizationTips = generateOptimizationTips(transcript, duration, contentCategory, targetAudience, targetLanguage)
		result.TrendingHashtags = generateTrendingHashtags(contentCategory, targetAudience)
		result.SuggestedCaption = generateSuggestedCaption(transcript, currentCaption, contentCategory, targetAudience, targetLanguage)
		result.BestPostingTime = getBestPostingTime(targetAudience, contentCategory)
		result.EngagementPrompts = generateEngagementPrompts(contentCategory, targetAudience, targetLanguage)
		result.CallToAction = generateCallToAction(contentCategory, targetAudience, targetLanguage)
		result.TrendingTopics = getTrendingTopics(contentCategory, targetAudience)
	} else {
		// Use AI results
		result.AnalysisMethod = "hybrid"
		result.OptimizationTips = aiAnalysis.OptimizationTips
		result.TrendingHashtags = aiAnalysis.TrendingHashtags
		result.SuggestedCaption = aiAnalysis.SuggestedCaption
		result.BestPostingTime = aiAnalysis.BestPostingTime
		result.EngagementPrompts = aiAnalysis.EngagementPrompts
		result.CallToAction = aiAnalysis.CallToAction
		result.TrendingTopics = aiAnalysis.TrendingTopics

		// Enhance AI results with rule-based insights
		result.OptimizationTips = enhanceWithRuleBasedTips(result.OptimizationTips, transcript, duration, contentCategory)
		result.TrendingHashtags = enhanceWithRuleBasedHashtags(result.TrendingHashtags, contentCategory)
	}

	return result, nil
}

// generateAIAnalysis uses AI to analyze trending and dynamic content
func generateAIAnalysis(transcript, currentCaption, contentCategory, targetAudience, targetLanguage string, duration float64) (*TikTokAnalysisResult, error) {
	// Get language name for prompt
	languageName := getLanguageName(targetLanguage)

	// Get API key
	configg := config.InfaConfig{}
	configg.LoadConfig()
	apiKey := configg.ApiKey
	// Create comprehensive AI prompt
	prompt := fmt.Sprintf(`B·∫°n l√† chuy√™n gia TikTok v·ªõi 10+ nƒÉm kinh nghi·ªám. Ph√¢n t√≠ch video n√†y v√† ƒë∆∞a ra g·ª£i √Ω t·ªëi ∆∞u ƒë·ªÉ viral tr√™n TikTok.

TH√îNG TIN VIDEO:
- Transcript: %s
- Caption hi·ªán t·∫°i: %s
- Th·ªùi l∆∞·ª£ng: %.1f gi√¢y
- Lo·∫°i n·ªôi dung: %s
- ƒê·ªëi t∆∞·ª£ng m·ª•c ti√™u: %s
- Ng√¥n ng·ªØ: %s

Y√äU C·∫¶U PH√ÇN T√çCH (TR·∫¢ V·ªÄ JSON):

1. OPTIMIZATION_TIPS: 3-5 tips c·ª• th·ªÉ ƒë·ªÉ t·ªëi ∆∞u video n√†y (b·∫±ng %s)
2. TRENDING_HASHTAGS: 8-10 hashtags trending hi·ªán t·∫°i ph√π h·ª£p v·ªõi n·ªôi dung
3. SUGGESTED_CAPTION: Caption t·ªëi ∆∞u cho TikTok (b·∫±ng %s, t·ªëi ƒëa 150 k√Ω t·ª±)
4. BEST_POSTING_TIME: Th·ªùi gian ƒëƒÉng t·ªët nh·∫•t cho ƒë·ªëi t∆∞·ª£ng %s
5. ENGAGEMENT_PROMPTS: 3 c√¢u h·ªèi ƒë·ªÉ tƒÉng t∆∞∆°ng t√°c (b·∫±ng %s)
6. CALL_TO_ACTION: G·ª£i √Ω CTA hi·ªáu qu·∫£ (b·∫±ng %s)
7. TRENDING_TOPICS: 3 ch·ªß ƒë·ªÅ trending hi·ªán t·∫°i ph√π h·ª£p

L∆ØU √ù:
- T·∫≠p trung v√†o xu h∆∞·ªõng hi·ªán t·∫°i (2024-2025)
- S·ª≠ d·ª•ng hashtags th·ª±c s·ª± trending
- Caption ph·∫£i c√≥ hook m·∫°nh v√† call-to-action
- T·∫•t c·∫£ n·ªôi dung b·∫±ng %s

TR·∫¢ V·ªÄ CH·ªà JSON, KH√îNG C√ì TEXT KH√ÅC:
{
  "optimization_tips": ["Tip 1", "Tip 2", "Tip 3"],
  "trending_hashtags": ["#hashtag1", "#hashtag2"],
  "suggested_caption": "Caption t·ªëi ∆∞u...",
  "best_posting_time": "19:00-21:00",
  "engagement_prompts": ["C√¢u h·ªèi 1?", "C√¢u h·ªèi 2?"],
  "call_to_action": "Follow ƒë·ªÉ xem th√™m!",
  "trending_topics": ["Topic 1", "Topic 2", "Topic 3"]
}`, transcript, currentCaption, duration, contentCategory, targetAudience, languageName, languageName, languageName, targetAudience, languageName, languageName, languageName, languageName)

	// Call AI service
	aiResponse, err := GenerateTikTokOptimization(prompt, apiKey)
	if err != nil {
		return nil, fmt.Errorf("AI analysis failed: %v", err)
	}

	// Parse AI response
	var aiResult map[string]interface{}
	if err := json.Unmarshal([]byte(aiResponse), &aiResult); err != nil {
		return nil, fmt.Errorf("failed to parse AI response: %v", err)
	}

	// Convert to TikTokAnalysisResult
	result := &TikTokAnalysisResult{}

	// Parse optimization tips
	if tips, ok := aiResult["optimization_tips"].([]interface{}); ok {
		for _, tip := range tips {
			if tipStr, ok := tip.(string); ok {
				result.OptimizationTips = append(result.OptimizationTips, tipStr)
			}
		}
	}

	// Parse trending hashtags
	if hashtags, ok := aiResult["trending_hashtags"].([]interface{}); ok {
		for _, hashtag := range hashtags {
			if hashtagStr, ok := hashtag.(string); ok {
				result.TrendingHashtags = append(result.TrendingHashtags, hashtagStr)
			}
		}
	}

	// Parse other fields
	if caption, ok := aiResult["suggested_caption"].(string); ok {
		result.SuggestedCaption = caption
	}
	if time, ok := aiResult["best_posting_time"].(string); ok {
		result.BestPostingTime = time
	}
	if prompts, ok := aiResult["engagement_prompts"].([]interface{}); ok {
		for _, prompt := range prompts {
			if promptStr, ok := prompt.(string); ok {
				result.EngagementPrompts = append(result.EngagementPrompts, promptStr)
			}
		}
	}
	if cta, ok := aiResult["call_to_action"].(string); ok {
		result.CallToAction = cta
	}
	if topics, ok := aiResult["trending_topics"].([]interface{}); ok {
		for _, topic := range topics {
			if topicStr, ok := topic.(string); ok {
				result.TrendingTopics = append(result.TrendingTopics, topicStr)
			}
		}
	}

	return result, nil
}

// enhanceWithRuleBasedTips combines AI tips with rule-based insights
func enhanceWithRuleBasedTips(aiTips []string, transcript string, duration float64, category string) []string {
	enhancedTips := make([]string, 0)

	// Add AI tips first
	enhancedTips = append(enhancedTips, aiTips...)

	// Add rule-based duration tips if not covered by AI
	hasDurationTip := false
	for _, tip := range aiTips {
		if strings.Contains(tip, "gi√¢y") || strings.Contains(tip, "th·ªùi l∆∞·ª£ng") || strings.Contains(tip, "duration") {
			hasDurationTip = true
			break
		}
	}

	if !hasDurationTip {
		if duration < 15 {
			enhancedTips = append(enhancedTips, "üé¨ Video qu√° ng·∫Øn! Th√™m n·ªôi dung ƒë·ªÉ ƒë·∫°t 15-60 gi√¢y l√Ω t∆∞·ªüng")
		} else if duration > 60 {
			enhancedTips = append(enhancedTips, "‚è±Ô∏è Video qu√° d√†i! C·∫Øt g·ªçn xu·ªëng 60 gi√¢y ƒë·ªÉ tƒÉng engagement")
		}
	}

	// Add category-specific rule-based tips
	categoryTips := getCategorySpecificTips(category)
	for _, tip := range categoryTips {
		// Check if AI already covered this tip
		alreadyCovered := false
		for _, aiTip := range aiTips {
			if strings.Contains(strings.ToLower(aiTip), strings.ToLower(tip)) {
				alreadyCovered = true
				break
			}
		}
		if !alreadyCovered {
			enhancedTips = append(enhancedTips, tip)
		}
	}

	// Limit to 5 tips
	if len(enhancedTips) > 5 {
		enhancedTips = enhancedTips[:5]
	}

	return enhancedTips
}

// enhanceWithRuleBasedHashtags combines AI hashtags with rule-based ones
func enhanceWithRuleBasedHashtags(aiHashtags []string, category string) []string {
	enhancedHashtags := make([]string, 0)

	// Add AI hashtags first
	enhancedHashtags = append(enhancedHashtags, aiHashtags...)

	// Add rule-based category hashtags if not already present
	categoryHashtags := getCategoryHashtags(category)
	for _, hashtag := range categoryHashtags {
		alreadyPresent := false
		for _, aiHashtag := range aiHashtags {
			if strings.EqualFold(hashtag, aiHashtag) {
				alreadyPresent = true
				break
			}
		}
		if !alreadyPresent {
			enhancedHashtags = append(enhancedHashtags, hashtag)
		}
	}

	// Add essential TikTok hashtags
	essentialHashtags := []string{"#fyp", "#foryou", "#viral", "#trending", "#tiktok"}
	for _, hashtag := range essentialHashtags {
		alreadyPresent := false
		for _, existingHashtag := range enhancedHashtags {
			if strings.EqualFold(hashtag, existingHashtag) {
				alreadyPresent = true
				break
			}
		}
		if !alreadyPresent {
			enhancedHashtags = append(enhancedHashtags, hashtag)
		}
	}

	// Limit to 10 hashtags
	if len(enhancedHashtags) > 10 {
		enhancedHashtags = enhancedHashtags[:10]
	}

	return enhancedHashtags
}

// getLanguageName returns language name for prompts
func getLanguageName(language string) string {
	languageNames := map[string]string{
		"vi": "Ti·∫øng Vi·ªát",
		"en": "Ti·∫øng Anh",
		"ja": "Ti·∫øng Nh·∫≠t",
		"ko": "Ti·∫øng H√†n",
		"zh": "Ti·∫øng Trung",
		"fr": "Ti·∫øng Ph√°p",
		"de": "Ti·∫øng ƒê·ª©c",
		"es": "Ti·∫øng T√¢y Ban Nha",
	}

	if name, exists := languageNames[language]; exists {
		return name
	}
	return "Ti·∫øng Vi·ªát"
}

// analyzeContentCategory determines the content category based on transcript and caption
func analyzeContentCategory(transcript, caption string) string {
	text := strings.ToLower(transcript + " " + caption)

	// Define category keywords
	categories := map[string][]string{
		"comedy":        {"h√†i", "vui", "c∆∞·ªùi", "funny", "joke", "humor", "comedy"},
		"education":     {"h·ªçc", "d·∫°y", "ki·∫øn th·ª©c", "education", "learn", "teach", "knowledge"},
		"lifestyle":     {"cu·ªôc s·ªëng", "lifestyle", "daily", "routine", "life"},
		"food":          {"ƒÉn", "n·∫•u", "m√≥n", "food", "cook", "recipe", "delicious"},
		"fashion":       {"th·ªùi trang", "fashion", "style", "outfit", "clothes"},
		"beauty":        {"l√†m ƒë·∫πp", "beauty", "makeup", "skincare", "cosmetic"},
		"fitness":       {"t·∫≠p", "gym", "fitness", "workout", "exercise", "health"},
		"travel":        {"du l·ªãch", "travel", "trip", "vacation", "destination"},
		"technology":    {"c√¥ng ngh·ªá", "tech", "technology", "gadget", "app"},
		"business":      {"kinh doanh", "business", "money", "investment", "entrepreneur"},
		"entertainment": {"gi·∫£i tr√≠", "entertainment", "music", "movie", "celebrity"},
		"news":          {"tin t·ª©c", "news", "current", "event", "update"},
	}

	// Count matches for each category
	scores := make(map[string]int)
	for category, keywords := range categories {
		for _, keyword := range keywords {
			if strings.Contains(text, keyword) {
				scores[category]++
			}
		}
	}

	// Find category with highest score
	maxScore := 0
	bestCategory := "general"
	for category, score := range scores {
		if score > maxScore {
			maxScore = score
			bestCategory = category
		}
	}

	return bestCategory
}

// calculateHookScore evaluates the hook strength in the first 3 seconds
func calculateHookScore(transcript string, duration float64, category string) int {
	// Base score based on content category
	baseScores := map[string]int{
		"comedy":        85,
		"education":     75,
		"lifestyle":     70,
		"food":          80,
		"fashion":       75,
		"beauty":        80,
		"fitness":       75,
		"travel":        85,
		"technology":    70,
		"business":      65,
		"entertainment": 80,
		"news":          70,
		"general":       70,
	}

	baseScore := baseScores[category]

	// Adjust based on transcript length and content
	words := strings.Fields(transcript)
	wordCount := len(words)

	// Ideal hook length is 10-20 words
	if wordCount >= 10 && wordCount <= 20 {
		baseScore += 10
	} else if wordCount < 5 {
		baseScore -= 15
	} else if wordCount > 30 {
		baseScore -= 10
	}

	// Check for hook indicators
	hookIndicators := []string{"b·∫°n c√≥ bi·∫øt", "ƒëi·ªÅu n√†y s·∫Ω", "shock", "kh√¥ng th·ªÉ tin", "amazing", "incredible", "must see", "viral"}
	text := strings.ToLower(transcript)
	for _, indicator := range hookIndicators {
		if strings.Contains(text, indicator) {
			baseScore += 5
		}
	}

	// Ensure score is within 0-100 range
	if baseScore > 100 {
		baseScore = 100
	} else if baseScore < 0 {
		baseScore = 0
	}

	return baseScore
}

// calculateViralPotential calculates the viral potential score
func calculateViralPotential(transcript string, duration float64, category, audience string) int {
	baseScore := 70

	// Duration optimization (15-60 seconds is ideal for TikTok)
	if duration >= 15 && duration <= 60 {
		baseScore += 15
	} else if duration < 10 {
		baseScore -= 10
	} else if duration > 120 {
		baseScore -= 20
	}

	// Audience-specific adjustments
	audienceScores := map[string]int{
		"teenagers":     85,
		"young_adults":  80,
		"adults":        70,
		"business":      60,
		"entertainment": 90,
		"education":     75,
		"fitness":       80,
		"beauty":        85,
		"food":          90,
		"general":       70,
	}

	if score, exists := audienceScores[audience]; exists {
		baseScore = (baseScore + score) / 2
	}

	// Content category adjustments
	categoryScores := map[string]int{
		"comedy":        90,
		"education":     75,
		"lifestyle":     80,
		"food":          95,
		"fashion":       85,
		"beauty":        90,
		"fitness":       85,
		"travel":        90,
		"technology":    70,
		"business":      65,
		"entertainment": 95,
		"news":          70,
		"general":       70,
	}

	if score, exists := categoryScores[category]; exists {
		baseScore = (baseScore + score) / 2
	}

	// Check for viral keywords
	viralKeywords := []string{"trending", "viral", "popular", "hot", "trend", "fyp", "foryou"}
	text := strings.ToLower(transcript)
	for _, keyword := range viralKeywords {
		if strings.Contains(text, keyword) {
			baseScore += 3
		}
	}

	if baseScore > 100 {
		baseScore = 100
	}

	return baseScore
}

// generateOptimizationTips creates specific optimization tips (rule-based fallback)
func generateOptimizationTips(transcript string, duration float64, category, audience, language string) []string {
	tips := []string{}

	// Duration tips
	if duration < 15 {
		tips = append(tips, "üé¨ Video qu√° ng·∫Øn! Th√™m n·ªôi dung ƒë·ªÉ ƒë·∫°t 15-60 gi√¢y l√Ω t∆∞·ªüng")
	} else if duration > 60 {
		tips = append(tips, "‚è±Ô∏è Video qu√° d√†i! C·∫Øt g·ªçn xu·ªëng 60 gi√¢y ƒë·ªÉ tƒÉng engagement")
	}

	// Category-specific tips
	categoryTips := getCategorySpecificTips(category)
	tips = append(tips, categoryTips...)

	// General optimization tips
	tips = append(tips, "üéØ T·∫°o hook m·∫°nh trong 3 gi√¢y ƒë·∫ßu ƒë·ªÉ gi·ªØ ch√¢n ng∆∞·ªùi xem")
	tips = append(tips, "üè∑Ô∏è S·ª≠ d·ª•ng 3-5 hashtags trending ƒë·ªÉ tƒÉng kh·∫£ nƒÉng viral")
	tips = append(tips, "üí¨ Th√™m c√¢u h·ªèi ƒë·ªÉ tƒÉng t∆∞∆°ng t√°c t·ª´ ng∆∞·ªùi xem")

	// Limit to 5 tips
	if len(tips) > 5 {
		tips = tips[:5]
	}

	return tips
}

// generateTrendingHashtags creates relevant trending hashtags (rule-based fallback)
func generateTrendingHashtags(category, audience string) []string {
	hashtags := []string{}

	// Category-specific hashtags
	categoryHashtags := getCategoryHashtags(category)
	hashtags = append(hashtags, categoryHashtags...)

	// Trending general hashtags
	hashtags = append(hashtags, "#fyp", "#foryou", "#viral", "#trending", "#tiktok")

	// Limit to 10 hashtags
	if len(hashtags) > 10 {
		hashtags = hashtags[:10]
	}

	return hashtags
}

// generateSuggestedCaption creates an optimized caption (rule-based fallback)
func generateSuggestedCaption(transcript, currentCaption, category, audience, language string) string {
	// Use current caption if it's good, otherwise generate new one
	if len(currentCaption) > 20 && len(currentCaption) < 150 {
		return enhanceExistingCaption(currentCaption, category, audience)
	}

	// Generate new caption based on content
	return generateNewCaption(transcript, category, audience)
}

// getBestPostingTime returns optimal posting time
func getBestPostingTime(audience, category string) string {
	// Audience-specific posting times
	audienceTimes := map[string]string{
		"teenagers":     "19:00-21:00",
		"young_adults":  "20:00-22:00",
		"adults":        "18:00-20:00",
		"business":      "12:00-14:00",
		"entertainment": "19:00-21:00",
		"education":     "15:00-17:00",
		"fitness":       "06:00-08:00",
		"beauty":        "19:00-21:00",
		"food":          "11:00-13:00",
		"general":       "19:00-21:00",
	}

	if time, exists := audienceTimes[audience]; exists {
		return time
	}

	return "19:00-21:00"
}

// Helper functions
func getCategorySpecificTips(category string) []string {
	tips := map[string][]string{
		"comedy": {
			"üòÑ S·ª≠ d·ª•ng nh·∫°c n·ªÅn vui nh·ªôn v√† hi·ªáu ·ª©ng √¢m thanh",
			"üé≠ Th√™m bi·ªÉu c·∫£m v√† c·ª≠ ch·ªâ ƒë·ªÉ tƒÉng t√≠nh h√†i h∆∞·ªõc",
		},
		"education": {
			"üìö S·ª≠ d·ª•ng text overlay ƒë·ªÉ nh·∫•n m·∫°nh ƒëi·ªÉm quan tr·ªçng",
			"üéØ Chia s·∫ª 1-2 tips th·ª±c t·∫ø m√† ng∆∞·ªùi xem c√≥ th·ªÉ √°p d·ª•ng ngay",
		},
		"food": {
			"üçΩÔ∏è Quay c·∫≠n c·∫£nh qu√° tr√¨nh n·∫•u v√† th√†nh ph·∫©m",
			"üëÖ Th√™m bi·ªÉu c·∫£m th∆∞·ªüng th·ª©c ƒë·ªÉ tƒÉng c·∫£m gi√°c ngon",
		},
		"fitness": {
			"üí™ Quay to√†n th√¢n ƒë·ªÉ ng∆∞·ªùi xem th·∫•y ƒë∆∞·ª£c ƒë·ªông t√°c",
			"‚è±Ô∏è Hi·ªÉn th·ªã th·ªùi gian t·∫≠p v√† s·ªë l·∫ßn l·∫∑p l·∫°i",
		},
	}

	if categoryTips, exists := tips[category]; exists {
		return categoryTips
	}

	return []string{}
}

func getCategoryHashtags(category string) []string {
	hashtags := map[string][]string{
		"comedy":     {"#comedy", "#funny", "#humor", "#viral"},
		"education":  {"#education", "#learn", "#knowledge", "#tips"},
		"food":       {"#food", "#cooking", "#recipe", "#delicious"},
		"fitness":    {"#fitness", "#workout", "#gym", "#health"},
		"beauty":     {"#beauty", "#makeup", "#skincare", "#glow"},
		"fashion":    {"#fashion", "#style", "#outfit", "#trend"},
		"travel":     {"#travel", "#vacation", "#trip", "#adventure"},
		"technology": {"#tech", "#technology", "#gadget", "#innovation"},
		"business":   {"#business", "#entrepreneur", "#success", "#money"},
		"lifestyle":  {"#lifestyle", "#daily", "#routine", "#life"},
	}

	if categoryHashtags, exists := hashtags[category]; exists {
		return categoryHashtags
	}

	return []string{"#viral", "#trending"}
}

func getTrendingTopics(category, audience string) []string {
	topics := map[string][]string{
		"comedy":    {"H√†i k·ªãch t√¨nh hu·ªëng", "Meme trending", "Parody"},
		"education": {"Tips cu·ªôc s·ªëng", "Ki·∫øn th·ª©c m·ªõi", "H·ªçc h·ªèi"},
		"food":      {"M√≥n ƒÉn trending", "C√¥ng th·ª©c n·∫•u ƒÉn", "Review ƒë·ªì ƒÉn"},
		"fitness":   {"Workout t·∫°i nh√†", "Ch·∫ø ƒë·ªô ƒÉn", "Motivation"},
		"beauty":    {"Makeup tutorial", "Skincare routine", "Beauty tips"},
		"fashion":   {"Outfit ideas", "Style tips", "Fashion trends"},
	}

	if categoryTopics, exists := topics[category]; exists {
		return categoryTopics
	}

	return []string{"Trending topics", "Viral content", "Popular trends"}
}

func analyzeVideoPacing(duration float64, category string) string {
	if duration < 15 {
		return "Qu√° nhanh - c·∫ßn th√™m n·ªôi dung"
	} else if duration <= 30 {
		return "T·ªët - ph√π h·ª£p v·ªõi attention span"
	} else if duration <= 60 {
		return "L√Ω t∆∞·ªüng - th·ªùi l∆∞·ª£ng t·ªëi ∆∞u"
	} else {
		return "Ch·∫≠m - c·∫ßn c·∫Øt g·ªçn ƒë·ªÉ tƒÉng engagement"
	}
}

func generateThumbnailTips(category, audience, language string) []string {
	return []string{
		"üéØ S·ª≠ d·ª•ng m√†u s·∫Øc t∆∞∆°ng ph·∫£n m·∫°nh",
		"üìù Th√™m text ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc",
		"üòä Hi·ªÉn th·ªã bi·ªÉu c·∫£m r√µ r√†ng",
		"üí° T·∫°o c·∫£m gi√°c t√≤ m√≤",
	}
}

func generateSoundSuggestions(category, audience, language string) []string {
	sounds := map[string][]string{
		"comedy":    {"Nh·∫°c vui nh·ªôn", "Sound effect h√†i h∆∞·ªõc", "Nh·∫°c trending"},
		"education": {"Nh·∫°c n·ªÅn nh·∫π nh√†ng", "Podcast style", "Background music"},
		"food":      {"Nh·∫°c ·∫©m th·ª±c", "Sound cooking", "Nh·∫°c chill"},
		"fitness":   {"Nh·∫°c workout", "Nh·∫°c motivation", "Nh·∫°c energy"},
	}

	if categorySounds, exists := sounds[category]; exists {
		return categorySounds
	}

	return []string{"Nh·∫°c trending", "Background music", "Sound effects"}
}

func enhanceExistingCaption(caption, category, audience string) string {
	// Add emoji based on category
	emojis := map[string]string{
		"comedy":     "üòÑ",
		"education":  "üìö",
		"food":       "üçΩÔ∏è",
		"fitness":    "üí™",
		"beauty":     "üíÑ",
		"fashion":    "üëó",
		"travel":     "‚úàÔ∏è",
		"technology": "üíª",
		"business":   "üíº",
		"lifestyle":  "üåü",
	}

	emoji := emojis[category]
	if emoji != "" {
		caption = emoji + " " + caption
	}

	// Add engagement prompt if not present
	if !strings.Contains(caption, "?") && !strings.Contains(caption, "Comment") {
		engagementPrompts := []string{
			" Comment n·∫øu b·∫°n th√≠ch!",
			" B·∫°n nghƒ© sao?",
			" Follow ƒë·ªÉ xem th√™m!",
		}
		caption += engagementPrompts[rand.Intn(len(engagementPrompts))]
	}

	return caption
}

func generateNewCaption(transcript, category, audience string) string {
	// Extract key points from transcript
	words := strings.Fields(transcript)
	if len(words) < 5 {
		return "N·ªôi dung th√∫ v·ªã! Follow ƒë·ªÉ xem th√™m! üé¨"
	}

	// Create caption based on category
	captions := map[string]string{
		"comedy":     "üòÇ " + getFirstSentence(transcript, 50) + " #comedy #funny",
		"education":  "üìö " + getFirstSentence(transcript, 60) + " #education #learn",
		"food":       "üçΩÔ∏è " + getFirstSentence(transcript, 50) + " #food #cooking",
		"fitness":    "üí™ " + getFirstSentence(transcript, 50) + " #fitness #motivation",
		"beauty":     "üíÑ " + getFirstSentence(transcript, 50) + " #beauty #glow",
		"fashion":    "üëó " + getFirstSentence(transcript, 50) + " #fashion #style",
		"travel":     "‚úàÔ∏è " + getFirstSentence(transcript, 50) + " #travel #adventure",
		"technology": "üíª " + getFirstSentence(transcript, 50) + " #tech #innovation",
		"business":   "üíº " + getFirstSentence(transcript, 50) + " #business #success",
		"lifestyle":  "üåü " + getFirstSentence(transcript, 50) + " #lifestyle #daily",
	}

	if caption, exists := captions[category]; exists {
		return caption
	}

	return "üé¨ " + getFirstSentence(transcript, 50) + " #viral #trending"
}

func getFirstSentence(text string, maxLength int) string {
	sentences := strings.Split(text, ".")
	if len(sentences) > 0 {
		sentence := strings.TrimSpace(sentences[0])
		if len(sentence) > maxLength {
			sentence = sentence[:maxLength] + "..."
		}
		return sentence
	}
	return text[:min(len(text), maxLength)]
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func generateEngagementPrompts(category, audience, language string) []string {
	prompts := map[string][]string{
		"comedy": {
			"B·∫°n c√≥ c∆∞·ªùi kh√¥ng? üòÇ",
			"Comment n·∫øu b·∫°n th·∫•y vui!",
			"Tag b·∫°n b√® c·∫ßn c∆∞·ªùi!",
		},
		"education": {
			"B·∫°n c√≥ bi·∫øt ƒëi·ªÅu n√†y kh√¥ng?",
			"Comment tip hay nh·∫•t b·∫°n bi·∫øt!",
			"Follow ƒë·ªÉ h·ªçc th√™m!",
		},
		"food": {
			"B·∫°n c√≥ th√≠ch m√≥n n√†y kh√¥ng?",
			"Comment m√≥n y√™u th√≠ch c·ªßa b·∫°n!",
			"Tag b·∫°n b√® th√≠ch ƒÉn!",
		},
		"fitness": {
			"B·∫°n c√≥ t·∫≠p th·ªÉ d·ª•c kh√¥ng?",
			"Comment goal fitness c·ªßa b·∫°n!",
			"Tag b·∫°n b√® c·∫ßn motivation!",
		},
	}

	if categoryPrompts, exists := prompts[category]; exists {
		return categoryPrompts
	}

	return []string{
		"B·∫°n nghƒ© sao v·ªÅ video n√†y?",
		"Comment n·∫øu b·∫°n th√≠ch!",
		"Follow ƒë·ªÉ xem th√™m n·ªôi dung hay!",
	}
}

func generateCallToAction(category, audience, language string) string {
	ctas := map[string]string{
		"comedy":    "Follow ƒë·ªÉ c∆∞·ªùi m·ªói ng√†y! üòÇ",
		"education": "Follow ƒë·ªÉ h·ªçc th√™m ki·∫øn th·ª©c m·ªõi! üìö",
		"food":      "Follow ƒë·ªÉ xem c√¥ng th·ª©c n·∫•u ƒÉn! üçΩÔ∏è",
		"fitness":   "Follow ƒë·ªÉ c√≥ motivation t·∫≠p luy·ªán! üí™",
		"beauty":    "Follow ƒë·ªÉ h·ªçc makeup v√† skincare! üíÑ",
		"fashion":   "Follow ƒë·ªÉ c·∫≠p nh·∫≠t xu h∆∞·ªõng th·ªùi trang! üëó",
		"travel":    "Follow ƒë·ªÉ kh√°m ph√° nh·ªØng ƒëi·ªÉm ƒë·∫øn m·ªõi! ‚úàÔ∏è",
		"business":  "Follow ƒë·ªÉ h·ªçc kinh doanh v√† th√†nh c√¥ng! üíº",
	}

	if cta, exists := ctas[category]; exists {
		return cta
	}

	return "Follow ƒë·ªÉ xem th√™m n·ªôi dung hay! üé¨"
}
