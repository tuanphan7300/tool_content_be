package service

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	texttospeech "cloud.google.com/go/texttospeech/apiv1"
	"google.golang.org/api/option"
	texttospeechpb "google.golang.org/genproto/googleapis/cloud/texttospeech/v1"
)

// VoiceSample ƒë·∫°i di·ªán cho m·ªôt voice sample ƒë√£ ƒë∆∞·ª£c cache
type VoiceSample struct {
	VoiceName    string    `json:"voice_name"`
	LanguageCode string    `json:"language_code"`
	DisplayName  string    `json:"display_name"`
	Gender       string    `json:"gender"`
	Quality      string    `json:"quality"`
	SampleText   string    `json:"sample_text"`
	AudioPath    string    `json:"audio_path"`
	AudioURL     string    `json:"audio_url"`
	FileSize     int64     `json:"file_size"`
	CreatedAt    time.Time `json:"created_at"`
}

// VoiceCacheService qu·∫£n l√Ω cache voice samples
type VoiceCacheService struct {
	samplesDir string
	client     *texttospeech.Client
	mutex      sync.RWMutex
	samples    map[string]*VoiceSample // voice_name -> VoiceSample
}

var (
	voiceCacheService *VoiceCacheService
	voiceCacheMutex   sync.Mutex
)

// InitVoiceCacheService kh·ªüi t·∫°o voice cache service
func InitVoiceCacheService() (*VoiceCacheService, error) {
	voiceCacheMutex.Lock()
	defer voiceCacheMutex.Unlock()

	if voiceCacheService != nil {
		return voiceCacheService, nil
	}

	// T·∫°o th∆∞ m·ª•c samples
	samplesDir := "./storage/voice_samples"
	if err := os.MkdirAll(samplesDir, 0755); err != nil {
		return nil, fmt.Errorf("failed to create samples directory: %v", err)
	}

	// Kh·ªüi t·∫°o Google TTS client
	ctx := context.Background()
	client, err := texttospeech.NewClient(ctx, option.WithCredentialsFile("data/google_clound_tts_api.json"))
	if err != nil {
		return nil, fmt.Errorf("failed to create TTS client: %v", err)
	}

	voiceCacheService = &VoiceCacheService{
		samplesDir: samplesDir,
		client:     client,
		samples:    make(map[string]*VoiceSample),
	}

	// Generate t·∫•t c·∫£ voice samples
	go voiceCacheService.GenerateAllVoiceSamples()

	return voiceCacheService, nil
}

// GetVoiceCacheService tr·∫£ v·ªÅ instance c·ªßa voice cache service
func GetVoiceCacheService() *VoiceCacheService {
	if voiceCacheService == nil {
		service, err := InitVoiceCacheService()
		if err != nil {
			log.Printf("Failed to initialize voice cache service: %v", err)
			return nil
		}
		return service
	}
	return voiceCacheService
}

// GenerateAllVoiceSamples t·∫°o t·∫•t c·∫£ voice samples
func (vcs *VoiceCacheService) GenerateAllVoiceSamples() {
	log.Println("üéµ [VOICE CACHE] B·∫Øt ƒë·∫ßu generate t·∫•t c·∫£ voice samples...")

	voices := GetAvailableVoices()
	totalVoices := 0
	generatedCount := 0

	// ƒê·∫øm t·ªïng s·ªë voices
	for _, languageVoices := range voices {
		totalVoices += len(languageVoices)
	}

	// Generate t·ª´ng voice
	for language, languageVoices := range voices {
		for _, voice := range languageVoices {
			if err := vcs.GenerateVoiceSample(voice, language); err != nil {
				log.Printf("‚ùå [VOICE CACHE] Failed to generate sample for %s: %v", voice.Name, err)
			} else {
				generatedCount++
				log.Printf("‚úÖ [VOICE CACHE] Generated sample %d/%d: %s", generatedCount, totalVoices, voice.Name)
			}
		}
	}

	log.Printf("üéµ [VOICE CACHE] Ho√†n th√†nh! ƒê√£ generate %d/%d voice samples", generatedCount, totalVoices)
}

// GenerateVoiceSample t·∫°o sample cho m·ªôt voice c·ª• th·ªÉ
func (vcs *VoiceCacheService) GenerateVoiceSample(voice VoiceOption, language string) error {
	// Ki·ªÉm tra xem sample ƒë√£ t·ªìn t·∫°i ch∆∞a
	samplePath := filepath.Join(vcs.samplesDir, fmt.Sprintf("%s_sample.mp3", voice.Name))
	if _, err := os.Stat(samplePath); err == nil {
		// Sample ƒë√£ t·ªìn t·∫°i, load v√†o cache
		return vcs.LoadVoiceSample(voice, language, samplePath)
	}

	// T·∫°o sample text d·ª±a tr√™n ng√¥n ng·ªØ
	sampleText := vcs.GetSampleText(language)

	// T·∫°o TTS request
	req := &texttospeechpb.SynthesizeSpeechRequest{
		Input: &texttospeechpb.SynthesisInput{
			InputSource: &texttospeechpb.SynthesisInput_Text{Text: sampleText},
		},
		Voice: &texttospeechpb.VoiceSelectionParams{
			LanguageCode: voice.LanguageCode,
			Name:         voice.Name,
		},
		AudioConfig: &texttospeechpb.AudioConfig{
			AudioEncoding:   texttospeechpb.AudioEncoding_MP3,
			SpeakingRate:    1.0,
			SampleRateHertz: 44100,
		},
	}

	// G·ªçi Google TTS API
	ctx := context.Background()
	resp, err := vcs.client.SynthesizeSpeech(ctx, req)
	if err != nil {
		return fmt.Errorf("TTS API call failed: %v", err)
	}

	// L∆∞u audio file
	if err := os.WriteFile(samplePath, resp.AudioContent, 0644); err != nil {
		return fmt.Errorf("failed to save sample file: %v", err)
	}

	// Load sample v√†o cache
	return vcs.LoadVoiceSample(voice, language, samplePath)
}

// LoadVoiceSample load voice sample v√†o cache
func (vcs *VoiceCacheService) LoadVoiceSample(voice VoiceOption, language string, samplePath string) error {
	// L·∫•y file info
	fileInfo, err := os.Stat(samplePath)
	if err != nil {
		return fmt.Errorf("failed to get file info: %v", err)
	}

	// T·∫°o VoiceSample
	sample := &VoiceSample{
		VoiceName:    voice.Name,
		LanguageCode: voice.LanguageCode,
		DisplayName:  voice.DisplayName,
		Gender:       voice.Gender,
		Quality:      voice.Quality,
		SampleText:   vcs.GetSampleText(language),
		AudioPath:    samplePath,
		AudioURL:     fmt.Sprintf("http://localhost:8888/voice-samples/%s_sample.mp3", voice.Name),
		FileSize:     fileInfo.Size(),
		CreatedAt:    fileInfo.ModTime(),
	}

	// Th√™m v√†o cache
	vcs.mutex.Lock()
	vcs.samples[voice.Name] = sample
	vcs.mutex.Unlock()

	return nil
}

// GetVoiceSample tr·∫£ v·ªÅ voice sample theo voice name
func (vcs *VoiceCacheService) GetVoiceSample(voiceName string) *VoiceSample {
	vcs.mutex.RLock()
	defer vcs.mutex.RUnlock()

	if sample, exists := vcs.samples[voiceName]; exists {
		// Tr·∫£ v·ªÅ full URL thay v√¨ relative path
		if !strings.HasPrefix(sample.AudioURL, "http") {
			sample.AudioURL = "http://localhost:8888/voice-samples/" + filepath.Base(sample.AudioURL)
		}
		return sample
	}
	return nil
}

// GetAllVoiceSamples tr·∫£ v·ªÅ t·∫•t c·∫£ voice samples
func (vcs *VoiceCacheService) GetAllVoiceSamples() []*VoiceSample {
	vcs.mutex.RLock()
	defer vcs.mutex.RUnlock()

	var samples []*VoiceSample
	for _, sample := range vcs.samples {
		// Tr·∫£ v·ªÅ full URL thay v√¨ relative path
		if !strings.HasPrefix(sample.AudioURL, "http") {
			sample.AudioURL = "http://localhost:8888/voice-samples/" + filepath.Base(sample.AudioURL)
		}
		samples = append(samples, sample)
	}
	return samples
}

// GetSampleText tr·∫£ v·ªÅ sample text ph√π h·ª£p cho t·ª´ng ng√¥n ng·ªØ
func (vcs *VoiceCacheService) GetSampleText(language string) string {
	sampleTexts := map[string]string{
		"vi": "Xin ch√†o! ƒê√¢y l√† gi·ªçng ƒë·ªçc m·∫´u ƒë·ªÉ b·∫°n c√≥ th·ªÉ nghe th·ª≠ v√† ch·ªçn gi·ªçng ph√π h·ª£p nh·∫•t.",
		"en": "Hello! This is a sample voice for you to preview and choose the most suitable one.",
	}

	if text, exists := sampleTexts[language]; exists {
		return text
	}

	// Default to English
	return sampleTexts["en"]
}

// RefreshVoiceSamples refresh t·∫•t c·∫£ voice samples
func (vcs *VoiceCacheService) RefreshVoiceSamples() error {
	log.Println("üîÑ [VOICE CACHE] Refreshing all voice samples...")

	// X√≥a t·∫•t c·∫£ samples c≈©
	vcs.mutex.Lock()
	vcs.samples = make(map[string]*VoiceSample)
	vcs.mutex.Unlock()

	// Generate l·∫°i
	go vcs.GenerateAllVoiceSamples()

	return nil
}
